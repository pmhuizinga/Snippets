// create nodes
create (NodeName1:Person {name:'NodeName1'})
create (NodeName2:Person {name:'NodeName2'})
create (NodeName3:Person {name:'NodeName3'})
create (NodeName4:Person {name:'NodeName4'})

// find nodes
match(a:Person) where a.name = "NodeName"
match(b:Person) where b.name = "NodeName2"
return a, b

// find nodes and create edge
MATCH (NodeName1:Person { name: 'NodeName1' }),(NodeName2:Person { name: 'NodeName2' })
MERGE (NodeName1)-[r:knows]->(NodeName2)
RETURN NodeName1, NodeName2

// delete edge
MATCH (Nodename1:Person {name: 'Nodename1'})-[r:knows]-(:Nodename2 {name: "Nodename2"}) 
DELETE r

// get the longest path
MATCH p=(start:node)-[:relation_type*1..10]->(end:node)
//WHERE id(start) = 123 AND id(end) = 456
RETURN p
ORDER BY length(p) DESC
LIMIT 1

// select path from a to b
match x = (a:node)-[r:relation_type*..]->(b:node {name:'node name'}) 
return x

// all nodes and edges
match(n) return n

// conditional select on node type
MATCH p=(n)-[r]-(m)
where (n:nodetype1 or n:nodetype2) and (n:nodetype1 or n:nodetype2)
return p

// find where like
match (a)-[r]-(b)
where r.subject =~ '.*ItemToLookFor.*'
return a, b
or

match p = (n)-[r]->(m)
where n.type IN ['nodetype1', 'nodetype2'] 
and m.type IN ['nodetype1', 'nodetype2']
return p

// select where like
match(n) where n.name contains "<input>" return n.name, n;
or
start n = node(*) where n.name contains "<input>" return n.name, n;

// view node and relation properties and counts
match (n)
return "Node" as Type,labels(n) as Name,count(n) as Count
union
match ()-[r]->()
return "Relationship" as Type,type(r) as Name, count(r) as Count

// find shortest path
match (a1:nodetype1), (a2:nodetype2), path = allshortestpaths ((a1)-[*]-(a2))
where toLower(a1.name) contains "name 1"
and toLower(a2.name) contains "name 2"
return path
limit 1;

// What kind of nodes exist
// Reporting on property and relationship counts per node.
MATCH (n) 
RETURN
DISTINCT labels(n),
count(*) AS SampleSize,
avg(size(keys(n))) as Avg_PropertyCount,
min(size(keys(n))) as Min_PropertyCount,
max(size(keys(n))) as Max_PropertyCount,
avg(size( (n)-[]-() ) ) as Avg_RelationshipCount,
min(size( (n)-[]-() ) ) as Min_RelationshipCount,
max(size( (n)-[]-() ) ) as Max_RelationshipCount

// count nodes with more then one relation
match (n)-[:relation]-(a) 
with n, count(a) as rels, collect(a) as target_nodes
where rels > 1
return n, target_nodes, rels
